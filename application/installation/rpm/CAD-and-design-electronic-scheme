#!/bin/env bash
# -*- coding: utf-8 -*-
#
## @Author: sensor-dream
## @Email: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © Sensor-Dream Boxed System (SDBS). Contacts: sensor-dream@sensor-dream.ru
## @License: http://www.apache.org/licenses/LICENSE-2.0
## @Site: https://sensor-dream.ru
## @File: CAD-and-design-electronic-scheme
## @Creation date file: 06.10.2020, 20:13:01

[[ -z "${CAD_and_design_electronic_scheme_script_source}" ]] && declare -rx CAD_and_design_electronic_scheme_script_source="$BASH_SOURCE"

if [[ -z "${CAD_and_design_electronic_scheme_script_source_path}" ]]; then
  temp_one="$(dirname ${CAD_and_design_electronic_scheme_script_source})"
  if [[ "${temp_one}" == '.' ]]; then
    declare -rx CAD_and_design_electronic_scheme_script_source_path="$(pwd)"
  else
    declare -rx CAD_and_design_electronic_scheme_script_source_path="${temp_one}"
  fi
fi

if [[ -z "${main_run_script_path}" ]]; then
  declare -rx main_run_script_path="$(pwd)"
  printf "Script runs from path: %s\n" "${main_run_script_path}"
fi

if [[ -z "${main_cfg_script_source}" ]]; then
  check=1
  while [[ "${check}" -eq 1 ]]; do
    if [[ ! -f 'main.cfg' ]]; then
      if [[ "$(pwd)" != "/" ]]; then
        cd ../
      else
        cd ${main_run_script_path}
        check=0
        echo -e '\e[31m'"!!! Not found configuration shared file !!!\033[0m"
        tput sgr0
        exit 1
      fi
    else
      check=0
      declare -rx main_project_path="$(pwd)"
      . "${main_project_path}/main.cfg" "$@"
      cd "${main_run_script_path}"
    fi
  done
fi

printf "Loading: %s\n" "$(readlink -m ${BASH_SOURCE})"

function install_CAD_and_design_electronic_scheme() {

  local install_pkg=(
    'qelectrotech'
    'wget'
    'pcb'
    'gerbv'
    'freecad'
    'gcad3d'
    'qucs'
    'kicad'
    'kicad-doc'
    'kicad-packages3d'
    'fritzing'
  )
  pm "$@" -- "${install_pkg[@]}"

  # sudo flatpak remote-add --if-not-exists flathub 'https://flathub.org/repo/flathub.flatpakrepo'
  # sudo flatpak install flathub 'org.librepcb.LibrePCB'

  install_pkg=(
    'gcc-c++'
    'clang'
    'git'
    'desktop-file-utils'
    'shared-mime-info'
    'openssl'
    'zlib'
    'quazip'
    'quazip-devel'
    'polyclipping'
    'polyclipping-devel'
    'pkgconf-pkg-config'
  )

  printf '%s\n' $(unset_dupes_in_array "${install_pkg[@]}") | sort -o "${main_project_path}/package-list/CAD-and-design-electronic-scheme.txt"
  pm "$@" -- "${install_pkg[@]}"

  [[ -z "$(check_installed_packages qt5)" ]] && . "${main_project_path}/application/installation/rpm/qt5"

  [[ -d "${main_project_path}/application/installation/src/LibrePCB" ]] || git clone --recursive "https://github.com/LibrePCB/LibrePCB.git" "${main_project_path}/application/installation/src/LibrePCB"

  cd "${main_project_path}/application/installation/src/LibrePCB"
  git submodule update --init --recursive

  [[ -d build ]] || mkdir build
  cd build
  sudo make uninstall
  qmake-qt5 -r ../librepcb.pro CONFIG+=ccache CONFIG+=release CONFIG+=force_debug_info PREFIX=/usr/local # UNBUNDLE+=quazip UNBUNDLE+=polyclipping UNBUNDLE+=fontobene-qt5
  make -j8
  sudo make install

  cd "${main_run_script_path}"

}

function main_CAD_and_design_electronic_scheme_script_source() {

  # prinf "Initialise main function of CAD-and-design-electronic-scheme script source\n";

  install_CAD_and_design_electronic_scheme "$@"

}

main_CAD_and_design_electronic_scheme_script_source "$@"
