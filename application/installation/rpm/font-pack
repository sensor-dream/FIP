#!/bin/env bash
# -*- coding: utf-8 -*-
#
## @Author: sensor-dream
## @Email: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © Sensor-Dream Boxed System (SDBS). Contacts: sensor-dream@sensor-dream.ru
## @License: http://www.apache.org/licenses/LICENSE-2.0
## @Site: https://sensor-dream.ru
## @File: font-pack
## @Creation date file: 17.12.2020, 12:42:57

[[ -z "${font_pack_script_source}" ]] && declare -rx font_pack_script_source="$BASH_SOURCE"

if [[ -z "${font_pack_script_source_path}" ]]; then
  temp_one="$(dirname ${font_pack_script_source})"
  if [[ "${temp_one}" == '.' ]]; then
    declare -rx font_pack_script_source_path="$(pwd)"
  else
    declare -rx font_pack_script_source_path="${temp_one}"
  fi
fi

if [[ -z "${main_run_script_path}" ]]; then
  declare -rx main_run_script_path="$(pwd)"
  printf "Script runs from path: %s\n" "${main_run_script_path}"
fi

if [[ -z "${main_cfg_script_source}" ]]; then
  check=1
  while [[ "${check}" -eq 1 ]]; do
    if [[ ! -f 'main.cfg' ]]; then
      if [[ "$(pwd)" != "/" ]]; then
        cd ../
      else
        cd ${main_run_script_path}
        check=0
        echo -e '\e[31m'"!!! Not found configuration shared file !!!\033[0m"
        tput sgr0
        exit 1
      fi
    else
      check=0
      declare -rx main_project_path="$(pwd)"
      . "${main_project_path}/main.cfg" "$@"
      cd "${main_run_script_path}"
    fi
  done
fi

printf "Loading: %s\n" "$(readlink -m ${BASH_SOURCE})"

function install_font_pack() {

  local install_pkg=(
    # Google Roboto condensed fonts
    'google-roboto-condensed-fonts'
    # Google Roboto fonts
    'google-roboto-fonts'
    # Google Roboto Mono fonts
    'google-roboto-mono-fonts'
    # Google Roboto Slab fonts
    'google-roboto-slab-fonts'
    # roboto-fontface (XStatic packaging standard)
    'python3-XStatic-roboto-fontface'
    # roboto-fontface commons
    'roboto-fontface-common'
    # roboto-fontface fonts
    'roboto-fontface-fonts'
    # Support for the Roboto family of fonts
    'texlive-roboto'
    'curl'
    'xorg-x11-font-utils'
    'xorg-x11-fonts-misc'
    'fontconfig'
    'ttmkfdir'
    'cabextract'
    'rpmdevtools'
    # fonts
    'xorg-x11-fonts-ISO8859-1-100dpi'
    'xorg-x11-fonts-ISO8859-1-75dpi'
    'xorg-x11-fonts-ISO8859-2-100dpi'
    'xorg-x11-fonts-ISO8859-2-75dpi'
    'xorg-x11-fonts-ISO8859-9-100dpi'
    'xorg-x11-fonts-ISO8859-9-75dpi'
    'xorg-x11-fonts-ISO8859-14-100dpi'
    'xorg-x11-fonts-ISO8859-14-75dpi'
    'xorg-x11-fonts-ISO8859-15-100dpi'
    'xorg-x11-fonts-ISO8859-15-75dpi'
    # X.Org X11 application bitmaps
    'xorg-x11-xbitmaps'
    #   X.Org X11 font utilities required for font installation, conversion, and generation.
    'xorg-x11-font-utils'
    #   A collection of Type1 fonts which are part of the core X Window System distribution.
    'xorg-x11-fonts-Type1'
    #   A free and portable font rendering engine
    'freetype'
    'fontawesome-fonts'
    'fontawesome-fonts-web'
    'intel-clear-sans-fonts'
  )

  printf '%s\n' $(unset_dupes_in_array "${install_pkg[@]}") | sort -o "${main_project_path}/package-list/font-pack.txt"
  pm "$@" -- "${install_pkg[@]}"

  echo 'Please run'
  echo "sudo rpm -i  https://downloads.sourceforge.net/project/mscorefonts2/rpms/msttcore-fonts-installer-2.6-1.noarch.rpm"

}

function main_font_pack_script_source() {

  # printf "Initialise main function of font-pack script source\n";

  install_font_pack "$@"

}

main_font_pack_script_source "$@"
