#!/bin/env bash
# -*- coding: utf-8 -*-
#
## @Author: sensor-dream
## @Email: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © Sensor-Dream Boxed System (SDBS). Contacts: sensor-dream@sensor-dream.ru
## @License: http://www.apache.org/licenses/LICENSE-2.0
## @Site: https://sensor-dream.ru
## @File: openssh
## @Creation date file: 13.11.2020, 06:12:56

[[ -z "${openssh_script_source}" ]] && declare -rx openssh_script_source="$BASH_SOURCE"

if [[ -z "${openssh_script_source_path}" ]]; then
  temp_one="$(dirname ${openssh_script_source})"
  if [[ "${temp_one}" == '.' ]]; then
    declare -rx openssh_script_source_path="$(pwd)"
  else
    declare -rx openssh_script_source_path="${temp_one}"
  fi
fi

if [[ -z "${main_run_script_path}" ]]; then
  declare -rx main_run_script_path="$(pwd)"
  printf "Script runs from path: %s\n" "${main_run_script_path}"
fi

if [[ -z "${main_cfg_script_source}" ]]; then
  check=1
  while [[ "${check}" -eq 1 ]]; do
    if [[ ! -f 'main.cfg' ]]; then
      if [[ "$(pwd)" != "/" ]]; then
        cd ../
      else
        cd ${main_run_script_path}
        check=0
        echo -e '\e[31m'"!!! Not found configuration shared file !!!\033[0m"
        tput sgr0
        exit 1
      fi
    else
      check=0
      declare -rx main_project_path="$(pwd)"
      . "${main_project_path}/main.cfg" "$@"
      cd "${main_run_script_path}"
    fi
  done
fi

printf "Loading: %s\n" "$(readlink -m ${BASH_SOURCE})"

function install_openssh() {

  local install_pkg=(
    #
    # An open source implementation of SSH protocol version 2
    #
    # URL          : http://www.openssh.com/portable.html
    # Лицензия     : BSD
    # Description  : SSH (Secure SHell) is a program for logging into and executing
    # : commands on a remote machine. SSH is intended to replace rlogin and
    # : rsh, and to provide secure encrypted communications between two
    # : untrusted hosts over an insecure network. X11 connections and
    # : arbitrary TCP/IP ports can also be forwarded over the secure channel.
    # :
    # : OpenSSH is OpenBSD's version of the last free version of SSH, bringing
    # : it up to date in terms of security and features.
    # :
    # : This package includes the core files necessary for both the OpenSSH
    # : client and server. To make this package useful, you should also
    # : install openssh-clients, openssh-server, or both.
    openssh
    # OpenSSH is a free version of SSH (Secure SHell), a program for logging
    # : into and executing commands on a remote machine. This package includes
    # : the clients necessary to make encrypted connections to SSH servers.
    openssh-clients
    # OpenSSH is a free version of SSH (Secure SHell), a program for logging
    # : into and executing commands on a remote machine. This package contains
    # : the secure shell daemon (sshd). The sshd daemon allows SSH clients to
    # : securely connect to your SSH server.
    openssh-server
    # The libssh2-devel package contains libraries and header files for
    # : developing applications that use libssh2.
    libssh2-devel
    # ssh-contact is a client/service tool that makes it easy to connect to
    # : your telepathy IM contacts via SSH. No need to care about dynamic
    # : IP, NAT, port forwarding, or firewalls anymore; if you can chat with
    # : a friend, you can also SSH to their machine.
    ssh-contact
    # This script tries to export SSH public keys to specified sites.
    # : It will walk the user through generating key pairs if it doesn't
    # : find any to export.  It handles all the fiddly details, like
    # : remembering the SSH key file names, updating the authorized_keys
    # : and making sure local and remote permissions are correct.
    # : It tells you what it's doing if it has to change anything.
    sshexport
    # You can use this to set environment variables, define functions,
    # : and run post-login commands. This is quite useful when you have several
    # : servers that you don't want to configure independently.
    sshrc
    # Transparent proxy server that works as a poor man's VPN. Forwards over ssh.
    # : Doesn't require admin. Works with Linux and MacOS. Supports DNS tunneling.
    # sshuttle \
  )

  printf '%s\n' $(unset_dupes_in_array "${install_pkg[@]}") | sort -o "${main_project_path}/package-list/openssh.txt"
  pm "$@" -- "${install_pkg[@]}"

}

function main_openssh_script_source() {

  # printf "Initialise main function of openssh script source\n";

  install_openssh "$@"

}

main_openssh_script_source "$@"
