#!/bin/env bash
# -*- coding: utf-8 -*-
#
## @Author: sensor-dream
## @Email: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © Sensor-Dream Boxed System (SDBS). Contacts: sensor-dream@sensor-dream.ru
## @License: http://www.apache.org/licenses/LICENSE-2.0
## @Site: https://sensor-dream.ru
## @File: scanning-servers-for-vulnerabilities-and-malware
## @Creation date file: 07.11.2020, 05:12:35

[[ -z "${scanning_servers_for_vulnerabilities_and_malware_script_source}" ]] && declare -rx scanning_servers_for_vulnerabilities_and_malware_script_source="$BASH_SOURCE"

if [[ -z "${scanning_servers_for_vulnerabilities_and_malware_script_source_path}" ]]; then
  temp_one="$(dirname ${scanning_servers_for_vulnerabilities_and_malware_script_source})"
  if [[ "${temp_one}" == '.' ]]; then
    declare -rx scanning_servers_for_vulnerabilities_and_malware_script_source_path="$(pwd)"
  else
    declare -rx scanning_servers_for_vulnerabilities_and_malware_script_source_path="${temp_one}"
  fi
fi

if [[ -z "${main_run_script_path}" ]]; then
  declare -rx main_run_script_path="$(pwd)"
  printf "Script runs from path: %s\n" "${main_run_script_path}"
fi

if [[ -z "${main_cfg_script_source}" ]]; then
  check=1
  while [[ "${check}" -eq 1 ]]; do
    if [[ ! -f 'main.cfg' ]]; then
      if [[ "$(pwd)" != "/" ]]; then
        cd ../
      else
        cd ${main_run_script_path}
        check=0
        echo -e '\e[31m'"!!! Not found configuration shared file !!!\033[0m"
        tput sgr0
        exit 1
      fi
    else
      check=0
      declare -rx main_project_path="$(pwd)"
      . "${main_project_path}/main.cfg" "$@"
      cd "${main_run_script_path}"
    fi
  done
fi

printf "Loading: %s\n" "$(readlink -m ${BASH_SOURCE})"

function install_scanning_servers_for_vulnerabilities_and_malware() {

  local install_pkg=(
    # : Lynis is an auditing and hardening tool for Unix/Linux and you might even call
    # : it a compliance tool. It scans the system and installed software. Then it
    # : performs many individual security control checks. It determines the hardening
    # : state of the machine, detects security issues and provides suggestions to
    # : improve the security defense of the system.
    'lynis'
    # : chkrootkit is a tool to locally check for signs of a rootkit.
    # : It contains:
    # :
    # : * chkrootkit: shell script that checks system binaries for
    # : rootkit modification.
    # : * ifpromisc: checks if the network interface is in promiscuous mode.
    # : * chklastlog: checks for lastlog deletions.
    # : * chkwtmp: checks for wtmp deletions.
    # : * chkproc: checks for signs of LKM trojans.
    # : * chkdirs: checks for signs of LKM trojans.
    # : * strings: quick and dirty strings replacement.
    # : * chkutmp: checks for utmp deletions.
    'chkrootkit'
    # : Rootkit Hunter (RKH) is an easy-to-use tool which checks
    # : computers running UNIX (clones) for the presence of rootkits
    # : and other unwanted tools.
    'rkhunter'
    # : The radare2 is a reverse-engineering framework that is multi-architecture,
    # : multi-platform, and highly scriptable. Radare2 provides a hexadecimal
    # : editor, wrapped I/O, file system support, debugger support, diffing
    # : between two functions or binaries, and code analysis at opcode,
    # : basic block, and function levels.
    'radare2'
    # : YARA is a tool aimed at (but not limited to) helping malware researchers to
    # : identify and classify malware samples. With YARA you can create descriptions
    # : of malware families (or whatever you want to describe) based on textual or
    # : binary patterns. Each description, a.k.a rule, consists of a set of strings
    # : and a Boolean expression which determine its logic.
    'yara'
  )

  pm "$@" -- "${install_pkg[@]}"

  . "${main_project_path}/application/installation/rpm/clamav" $@

}

function main_scanning_servers_for_vulnerabilities_and_malware_script_source() {

  # printf "Initialise main function of scanning-servers-for-vulnerabilities-and-malware script source\n";

  install_scanning_servers_for_vulnerabilities_and_malware "$@"

}

main_scanning_servers_for_vulnerabilities_and_malware_script_source "$@"
