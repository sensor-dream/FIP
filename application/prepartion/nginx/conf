#!/bin/env bash
# -*- coding: utf-8 -*-
#
## @Author: sensor-dream
## @Email: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © Sensor-Dream Boxed System (SDBS). Contacts: sensor-dream@sensor-dream.ru
## @License: http://www.apache.org/licenses/LICENSE-2.0
## @Site: https://sensor-dream.ru
## @File: conf
## @Creation date file: 13.09.2020, 11:32:44

declare -rx conf_script_source="$BASH_SOURCE"

temp_one="$(dirname ${conf_script_source})"
if [[ "${temp_one}" == '.' ]]; then
  declare -rx conf_script_source_path="$(pwd)"
else
  declare -rx conf_script_source_path="${temp_one}"
fi

if [[ -z "${main_run_script_path}" ]]; then
  declare -rx main_run_script_path="$(pwd)"
  printf "Script runs from path: %s\n" "${main_run_script_path}"
fi

if [[ -z "${main_cfg_script_source}" ]]; then
  check=1
  while [[ "${check}" -eq 1 ]]; do
    if [[ ! -f 'main.cfg' ]]; then
      if [[ "$(pwd)" != "/" ]]; then
        cd ../
      else
        cd ${main_run_script_path}
        check=0
        echo -e '\e[31m'"!!! Not found configuration shared file !!!\033[0m"
        tput sgr0
        exit 1
      fi
    else
      check=0
      declare -rx main_project_path="$(pwd)"
      . "${main_project_path}/main.cfg" "$@"
      cd "${main_run_script_path}"
    fi
  done
fi

printf "Loading: %s\n" "$(readlink -m ${conf_script_source})"

function main_conf_script_source() {

  # prinf "Initialise main function of conf script source\n";

  [[ $(systemctl is-active nginx) == 'active' ]] && sudo systemctl stop nginx

  # local server_name="${cfg_hostname}"
  local server_name="_"
  [[ -z "${nginx_script_source_path}" ]] && local nginx_script_source_path='.'
  [[ -z "$rev_timestamp" ]] && local rev_timestamp="$(cat ${nginx_script_source_path}/rev-timestamp.txt)"

  # cat > nginx.conf nginx.base.conf - <<EOF
  #EOF

  cat <<EOF | sudo tee /etc/nginx/nginx.conf >/dev/null
# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

# user nginx;
user apache;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

#
# DDoS prevention in firewall
# /sbin/iptables -A INPUT -p tcp --syn --dport 80 -m connlimit --connlimit-above 20 -j REJECT --reject-with tcp-reset
# /sbin/iptables -A INPUT -p tcp --syn --dport 443 -m connlimit --connlimit-above 20 -j REJECT --reject-with tcp-reset
#

events {
    # worker_connections 2048; # default
    # DDoS prevention
    worker_connections 50000;
}

http {

    # lua_package_path "/usr/lib64/lua/lua5.3/?.lua;;";

    log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                      '\$status \$body_bytes_sent "\$http_referer" '
                      '"\$http_user_agent" "\$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    # tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096; # default 4096
    types_hash_bucket_size 64; # default 64

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    server {
        listen       80;
        listen       [::]:80;
        server_name  ${server_name};
        root         /usr/share/nginx/html;
        # Redirect non-https traffic to https
        if (\$scheme != "https") {
            return 301 https://\$host\$request_uri;
        }
    }

    server {

        listen       443 ssl http2;
        listen       [::]:443 ssl http2 default_server;
        server_name  ${server_name};
        root         /usr/share/nginx/html;


        # signed cert plus intermediates
        ssl_certificate "/etc/letsencrypt/live/${cfg_docfg}/fullchain.pem";
        # private key
        ssl_certificate_key "/etc/letsencrypt/live/${cfg_docfg}/privkey.pem";
        # verify chain of trust of OCSP response using Root CA and Intermediate certs
        ssl_trusted_certificate "/etc/letsencrypt/live/${cfg_docfg}/chain.pem";

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location ~* \.(eot|ttf|woff|woff2) {
          add_header Access-Control-Allow-Origin *;
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }

}
EOF

  . "conf.d/default"
  . "default.d/default"

  echo -e "\nPlease visit in:\n\thttps://www.ssllabs.com/ssltest\n\thttps://www.immuniweb.com/ssl\n\thttps://www.sslshopper.com/ssl-checker.html\n\thttps://www.digicert.com/help\n\thttps://www.wormly.com/test_ssl\n\thttps://certlogik.com/ssl-checker/"

  temp_one="$(systemctl is-active nginx)"

  [[ "${temp_one}" == 'inactive' ]] && sudo systemctl start nginx

  # openssl s_client -connect ${cfg_docfg}:443 -servername ${cfg_docfg} -status </dev/null
  # openssl s_client -connect ${cfg_docfg}:443 -status
  # echo -e "\nSTATUS service NGINX - "${temp_one}"\nSTATUS OCSP responce connect ${cfg_docfg}:443\n"
  # echo QUIT | openssl s_client -connect ${cfg_docfg}:443 -tlsextdebug -status 2>/dev/null
  # echo QUIT | openssl s_client -servername ${cfg_docfg} -connect ${cfg_docfg}:443 -tlsextdebug -status 2>/dev/null | grep -A 17 'OCSP response:' | grep -B 17 'Next Update'
  # echo QUIT | openssl s_client -connect ${cfg_docfg}:443 -status 2>/dev/null | grep -A 17 'OCSP response:' | grep -B 17 'Next Update'

  nmap --script ssl-enum-ciphers -p 443 "${cfg_docfg}"

}

main_conf_script_source "$@"
