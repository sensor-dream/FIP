#!/bin/env bash
# -*- coding: utf-8 -*-
#
## @Author: sensor-dream
## @Email: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © Sensor-Dream Boxed System (SDBS). Contacts: sensor-dream@sensor-dream.ru
## @License: http://www.apache.org/licenses/LICENSE-2.0
## @Site: https://sensor-dream.ru
## @File: conf
## @Creation date file: 13.09.2020, 11:32:44

declare -rx conf_script_source="$BASH_SOURCE"

temp_one="$(dirname ${conf_script_source})"
if [[ "${temp_one}" == '.' ]]; then
  declare -rx conf_script_source_path="$(pwd)"
else
  declare -rx conf_script_source_path="${temp_one}"
fi

if [[ -z "${main_run_script_path}" ]]; then
  declare -rx main_run_script_path="$(pwd)"
  printf "Script runs from path: %s\n" "${main_run_script_path}"
fi

if [[ -z "${main_cfg_script_source}" ]]; then
  check=1
  while [[ "${check}" -eq 1 ]]; do
    if [[ ! -f 'main.cfg' ]]; then
      if [[ "$(pwd)" != "/" ]]; then
        cd ../
      else
        cd ${main_run_script_path}
        check=0
        echo -e '\e[31m'"!!! Not found configuration shared file !!!\033[0m"
        tput sgr0
        exit 1
      fi
    else
      check=0
      declare -rx main_project_path="$(pwd)"
      . "${main_project_path}/main.cfg" "$@"
      cd "${main_run_script_path}"
    fi
  done
fi

printf "Loading: %s\n" "$(readlink -m ${conf_script_source})"

function main_conf_script_source() {

  # prinf "Initialise main function of conf script source\n";

  local server_name="_"

  local rev_timestamp="$(date +%s)"

  cat <<EOF | sudo tee /etc/nginx/nginx.conf
# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 2048;
}

http {

    map \$remote_addr \$hack_name_server {
        '127.0.0.1' 'DEV - SDBS - 23.06.06 - rev: $rev_timestamp';
        '::1'       'DEV - SDBS - 23.06.06 - rev: $rev_timestamp';
        default     'SDBS - 23.06.06 - rev: $rev_timestamp';
    }

    server_tokens off; # removed pound sign

    more_set_headers 'Server: \$hack_name_server';

    sub_filter_last_modified on;
    sub_filter_once off;
    subs_filter_types text/css text/xml application/javascript application/x-javascript application/json;
    subs_filter '<center>nginx/1.18.0</center>' '<center>\$hack_name_server</center>' gior;
    subs_filter 'Sensor-Dream Boxed System' '<span style="color: #f5bb09;">S</span>ensor-<span style="color: #3ea852;">D</span>ream <span style="color: #ea4334;">B</span>oxed <span style="color: #4285f4;">S</span>ystem' gior;
    subs_filter 'Server: SDBS' 'Server: <strong><span style="color: #f5bb09;">S</span><span style="color: #3ea852;">D</span><span style="color: #ea4334;">B</span><span style="color: #4285f4;">S</span></strong>' gior;

    log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                      '\$status \$body_bytes_sent "\$http_referer" '
                      '"\$http_user_agent" "\$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    # tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096; # default 4096
    types_hash_bucket_size 64; # default 64

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    server {
        listen       80;
        listen       [::]:80;
        server_name  ${server_name};
        root         /usr/share/nginx/html;
        # Redirect non-https traffic to https
        if (\$scheme != "https") {
            return 301 https://\$host\$request_uri;
        }
    }

    server {

        listen       443 ssl http2;
        listen       [::]:443 ssl http2;
        server_name  ${server_name};
        root         /usr/share/nginx/html;

        charset utf-8;

        # set merge_slashes off;
        # location ~ // {
        #     rewrite ^(.*?)//+(.*)\$ \$1/\$2 permanent;
        # }
        # default is set merge_slashes on;
        if (\$request_uri ~ ^[^?]*//) {
            rewrite ^ \$uri permanent;
        }
        # universal rewrite of set merge_slashes on|off;
        # if (\$request_uri ~ ^(?P<left>[^?]*?)//+(?P<right>[^?]*)) {
        #     rewrite ^ \$left/\$right permanent;
        # }

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        ssl_protocols TLSv1.2 TLSv1.3;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        # signed cert plus intermediates
        ssl_certificate "/etc/letsencrypt/live/sensor-dream.ru/fullchain.pem";
        # private key
        ssl_certificate_key "/etc/letsencrypt/live/sensor-dream.ru/privkey.pem";
        # verify chain of trust of OCSP response using Root CA and Intermediate certs
        ssl_trusted_certificate "/etc/ssl/isrg-root-ocsp-x1.pem";

        # ssl_session_cache shared:SSL:1m; # default
        ssl_session_cache shared:SDBS:50m;
        # ssl_session_timeout  10m; # default
        ssl_session_timeout  5m;

        # ssl_ciphers PROFILE=SYSTEM; # default
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        # ssl_prefer_server_ciphers on; # default
        ssl_prefer_server_ciphers off;

        ssl_session_tickets off; # default on
        ssl_dhparam /etc/ssl/private/dhparam.pem;

        # HSTS (ngx_http_headers_module is required) (63072000 seconds)
        add_header Strict-Transport-Security "max-age=63072000" always;

        # ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
	      add_header X-Frame-Options DENY always;

        # ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
	      add_header X-Content-Type-Options nosniff always;

        # ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
	      add_header X-Xss-Protection "1; mode=block" always;

        # replace with the IP address of your resolver
        resolver 1.0.0.1 1.1.1.1 valid=300s;
        resolver_timeout 5s;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }

}
EOF

  openssl s_client -connect sensor-dream.ru:443 -servername sensor-dream.ru -status </dev/null

}

main_conf_script_source "$@"
