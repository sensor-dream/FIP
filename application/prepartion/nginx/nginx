#!/bin/env bash
# -*- coding: utf-8 -*-
#
## @Author: sensor-dream
## @Email: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © Sensor-Dream Boxed System (SDBS). Contacts: sensor-dream@sensor-dream.ru
## @License: http://www.apache.org/licenses/LICENSE-2.0
## @Site: https://sensor-dream.ru
## @File: nginx
## @Creation date file: 10.09.2020, 09:51:58

declare -rx nginx_script_source="$BASH_SOURCE"

if [[ -z "${main_run_script_path}" ]]; then
  declare -rx main_run_script_path="$(pwd)"
  printf "Script runs from path: %s\n" "${main_run_script_path}"
fi

if [[ -z "${main_cfg_script_source}" ]]; then
  check=1
  while [[ "${check}" -eq 1 ]]; do
    if [[ ! -f 'main.cfg' ]]; then
      if [[ "$(pwd)" != "/" ]]; then
        cd ../
      else
        cd ${main_run_script_path}
        check=0
        echo -e '\e[31m'"!!! Not found configuration shared file !!!\033[0m"
        tput sgr0
        exit 1
      fi
    else
      check=0
      declare -rx main_project_path="$(pwd)"
      . "${main_project_path}/main.cfg" "$@"
      cd "${main_run_script_path}"
    fi
  done
fi

function install_nginx_dependence() {

  if [[ ! -f '/etc/yum.repos.d/openresty.repo' ]]; then
    wget https://openresty.org/package/fedora/openresty.repo
    sudo mv openresty.repo /etc/yum.repos.d/
    sudo dnf check-update
  fi

  local install_pkg=(
    'libxml2'
    'libxslt'
    'libxml2-devel'
    'libxslt-devel'
    'gperftools'
    'gperftools-devel'
    'libmaxminddb'
    'libmaxminddb-devel'
    'pcre-devel'
    'openssl-devel'
    'gcc'
    'curl'
    'openresty'
    'openresty-resty'
  )

  sudo dnf install "${install_pkg[@]}"

}

printf "Loading: %s\n" "$(readlink -m ${nginx_script_source})"

function main_nginx_script_source() {

  # prinf "Initialise main function of nginx script source\n";

  local nginx_version="$(rpm -qi nginx | awk '/Version/ { print $3 }')"
  # local nginx_version='1.19.0'
  local configure_arguments=''
  local src_nginx_path="${main_project_path}/application/installation/src/nginx"

  [[ -z "${nginx_version}" ]] && . "${main_project_path}/application/installation/rpm/nginx"

  [[ -z "${cfg_full_name}" ]] && . "${main_project_path}/hidden/cfg-personal-information"

  install_nginx_dependence

  [[ $(systemctl is-enabled nginx) == 'enable' ]] || sudo systemctl enable nginx
  [[ $(systemctl is-active nginx) == 'active' ]] && sudo systemctl stop nginx

  [[ -f '/usr/sbin/nginx.back' ]] || sudo mv '/usr/sbin/nginx' '/usr/sbin/nginx.back'

  [[ -d "${src_nginx_path}" ]] || mkdir -p "${src_nginx_path}"

  current_path="$(pwd)"

  cd "${src_nginx_path}"

  if [[ -f "configure-arguments.txt" ]]; then
    configure_arguments="$(cat configure-arguments.txt)"
  else
    configure_arguments=$(nginx -V 2>&1 | grep 'configure arguments' | awk -F': ' '{ print $2}')
    echo "${configure_arguments}" >"configure-arguments.txt"
  fi

  [[ -f "nginx-${nginx_version}.tar.gz" ]] || wget "http://nginx.org/download/nginx-${nginx_version}.tar.gz"
  [[ -d "ngx_devel_kit" ]] || git clone "https://github.com/vision5/ngx_devel_kit.git"
  [[ -d "headers-more-nginx-module" ]] || git clone "https://github.com/openresty/headers-more-nginx-module.git"
  [[ -d "ngx_http_geoip2_module" ]] || git clone "https://github.com/leev/ngx_http_geoip2_module.git"
  [[ -d "set-misc-nginx-module" ]] || git clone "https://github.com/openresty/set-misc-nginx-module.git"
  [[ -d "ngx_http_substitutions_filter_module" ]] || git clone "git://github.com/yaoweibin/ngx_http_substitutions_filter_module.git"
  [[ -d "memc-nginx-module" ]] || git clone "https://github.com/openresty/memc-nginx-module.git"
  [[ -d "srcache-nginx-module" ]] || git clone "https://github.com/openresty/srcache-nginx-module.git"
  [[ -d "nginx-module-vts" ]] || git clone "https://github.com/vozlt/nginx-module-vts.git"

  # TODO CONFIGYRE LUA MODULE
  # [[ -d "lua-nginx-module" ]] || git clone "https://github.com/openresty/lua-nginx-module.git"

  cd "nginx-${nginx_version}"

  make clean

  # TODO CONFIGYRE LUA MODULE
  # export LUAJIT_LIB=/usr/lib64
  # export LUAJIT_INC=/usr/include/luajit-2.1
  # local lua_version="5.3"
  # configure_arguments=$(echo "${configure_arguments}" | sed "s%--with-ld-opt='-Wl%--with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib%; s%--with-cc-opt='%--with-cc-opt='-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC -Wp,%")
  #bash -c "./configure ${configure_arguments} --with-stream --add-module=${main_project_path}/application/installation/src/nginx/ngx_devel_kit --add-dynamic-module=${main_project_path}/application/installation/src/nginx/headers-more-nginx-module --add-dynamic-module=${main_project_path}/application/installation/src/nginx/ngx_http_geoip2_module --add-dynamic-module=${main_project_path}/application/installation/src/nginx/ngx_devel_kit --add-dynamic-module=${main_project_path}/application/installation/src/nginx/set-misc-nginx-module --add-dynamic-module=${main_project_path}/application/installation/src/nginx/ngx_http_substitutions_filter_module --add-dynamic-module=${main_project_path}/application/installation/src/nginx/lua-nginx-module"

  bash -c "./configure ${configure_arguments} --with-stream --add-module=${main_project_path}/application/installation/src/nginx/ngx_devel_kit --add-dynamic-module=${main_project_path}/application/installation/src/nginx/headers-more-nginx-module --add-dynamic-module=${main_project_path}/application/installation/src/nginx/ngx_http_geoip2_module --add-dynamic-module=${main_project_path}/application/installation/src/nginx/ngx_devel_kit --add-dynamic-module=${main_project_path}/application/installation/src/nginx/set-misc-nginx-module --add-dynamic-module=${main_project_path}/application/installation/src/nginx/ngx_http_substitutions_filter_module --add-dynamic-module=${main_project_path}/application/installation/src/nginx/memc-nginx-module --add-dynamic-module=${main_project_path}/application/installation/src/nginx/srcache-nginx-module --add-dynamic-module=${main_project_path}/application/installation/src/nginx/nginx-module-vts"

  make -j${number_cores}

  sudo cp objs/*.so "/lib64/nginx/modules/"

  [[ -f "/usr/share/nginx/modules/mod-http-ndk.conf" ]] || echo '# load_module "/usr/lib64/nginx/modules/ndk_http_module.so";' | sudo tee "/usr/share/nginx/modules/mod-http-ndk.conf"
  [[ -f "/usr/share/nginx/modules/mod-http-set-misc.conf" ]] || echo -e 'load_module "/usr/lib64/nginx/modules/ngx_http_set_misc_module.so";' | sudo tee "/usr/share/nginx/modules/mod-http-set-misc.conf"
  [[ -f "/usr/share/nginx/modules/mod-http-headers-more-filter.conf" ]] || echo 'load_module "/usr/lib64/nginx/modules/ngx_http_headers_more_filter_module.so";' | sudo tee "/usr/share/nginx/modules/mod-http-headers-more-filter.conf"
  [[ -f "/usr/share/nginx/modules/mod-http-geoip2.conf" ]] || echo -e 'load_module "/usr/lib64/nginx/modules/ngx_http_geoip2_module.so";\nload_module "/usr/lib64/nginx/modules/ngx_stream_geoip2_module.so";' | sudo tee "/usr/share/nginx/modules/mod-http-geoip2.conf"
  [[ -f "/usr/share/nginx/modules/mod-http-subs-filter.conf" ]] || echo 'load_module "/usr/lib64/nginx/modules/ngx_http_subs_filter_module.so";' | sudo tee "/usr/share/nginx/modules/mod-http-subs-filter.conf"
  [[ -f "/usr/share/nginx/modules/mod-stream.conf" ]] && sudo sed -i 's%^load_module%# load_module%' "/usr/share/nginx/modules/mod-stream.conf"
  [[ -f "/usr/share/nginx/modules/mod-memc.conf" ]] || echo 'load_module "/usr/lib64/nginx/modules/ngx_http_memc_module.so";' | sudo tee "/usr/share/nginx/modules/mod-memc.conf"
  [[ -f "/usr/share/nginx/modules/mod-http-srcache-filter.conf" ]] || echo 'load_module "/usr/lib64/nginx/modules/ngx_http_srcache_filter_module.so";' | sudo tee "/usr/share/nginx/modules/mod-http-srcache-filter.conf"
  [[ -f "/usr/share/nginx/modules/mod-http-vhost-traffic-status.conf" ]] || echo 'load_module "/usr/lib64/nginx/modules/ngx_http_vhost_traffic_status_module.so";' | sudo tee "/usr/share/nginx/modules/mod-http-vhost-traffic-status.conf"

  # TODO CONFIGYRE LUA MODULE
  # [[ -f "/usr/share/nginx/modules/mod-http-lua.conf" ]] || echo 'load_module "/usr/lib64/nginx/modules/ngx_http_lua_module.so";' | sudo tee "/usr/share/nginx/modules/mod-http-lua.conf"

  cat <<EOF >/dev/null
  # TODO 51Degrees Device Detection exploration
  cd "${main_project_path}/application/installation/src/nginx"
  [[ -d "Device-Detection" ]] || git clone "https://github.com/51Degrees/Device-Detection.git"
  cd "Device-Detection"
  make module pattern VERSION=${nginx_version}
EOF

  sudo cp "objs/nginx" '/usr/sbin/nginx'

  cd '/usr/share/nginx/html'

  temp_one="$(readlink 404.html)"
  [[ -z "${temp_one}" ]] && temp_one='404.html'
  [[ -f "${temp_one}.back" ]] || sudo mv "${temp_one}" "${temp_one}.back"
  . ${current_path}/404

  temp_one="$(readlink 50x.html)"
  [[ -z "${temp_one}" ]] && temp_one='50x.html'
  [[ -f "${temp_one}.back" ]] || sudo mv "${temp_one}" "${temp_one}.back"
  . ${current_path}/50x

  temp_one="$(readlink index.html)"
  [[ -z "${temp_one}" ]] && temp_one='50x.html'
  [[ -f "${temp_one}.back" ]] || sudo mv "${temp_one}" "${temp_one}.back"
  # sudo cp "${current_path}/index.html" 'index.html'
  . ${current_path}/index

  if ! grep -qE "${cfg_full_org}(.*)?\n" '/etc/nginx/nginx.conf'; then
    sudo sed -i -e "s/^http.*\$/http {\n\n    more_set_headers \'Server: ${cfg_full_org} (${cfg_org} - 23.06.06 - teddy bear)\';\n\nsubs_filter '<center>nginx\/${nginx_version}<\/center>' '<center>${cfg_full_org} (${cfg_org} - 23.06.06 - teddy bear)<\/center>' gior;" '/etc/nginx/nginx.conf'
  fi

  sudo systemctl start nginx

  cd "${main_run_script_path}"

}

main_nginx_script_source "$@"
