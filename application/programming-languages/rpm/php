#!/bin/env bash
# -*- coding: utf-8 -*-
#
## @Author: sensor-dream
## @Email: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © Sensor-Dream Boxed System (SDBS). Contacts: sensor-dream@sensor-dream.ru
## @License: http://www.apache.org/licenses/LICENSE-2.0
## @Site: https://sensor-dream.ru
## @File: php
## @Creation date file: 08.10.2020, 06:57:20

[[ -z "${php_script_source}" ]] && declare -rx php_script_source="$BASH_SOURCE"

if [[ -z "${php_script_source_path}" ]]; then
  temp_one="$(dirname ${php_script_source})"
  if [[ "${temp_one}" == '.' ]]; then
    declare -rx php_script_source_path="$(pwd)"
  else
    declare -rx php_script_source_path="${temp_one}"
  fi
fi

if [[ -z "${main_run_script_path}" ]]; then
  declare -rx main_run_script_path="$(pwd)"
  printf "Script runs from path: %s\n" "${main_run_script_path}"
fi

if [[ -z "${main_cfg_script_source}" ]]; then
  check=1
  while [[ "${check}" -eq 1 ]]; do
    if [[ ! -f 'main.cfg' ]]; then
      if [[ "$(pwd)" != "/" ]]; then
        cd ../
      else
        cd ${main_run_script_path}
        check=0
        echo -e '\e[31m'"!!! Not found configuration shared file !!!\033[0m"
        tput sgr0
        exit 1
      fi
    else
      check=0
      declare -rx main_project_path="$(pwd)"
      . "${main_project_path}/main.cfg" "$@"
      cd "${main_run_script_path}"
    fi
  done
fi

printf "Loading: %s\n" "$(readlink -m ${BASH_SOURCE})"

function install_php() {

  # Краткое опис : PHP scripting language for creating dynamic web sites
  # URL          : http://www.php.net/
  # Лицензия     : PHP and Zend and BSD and MIT and ASL 1.0 and NCSA
  # Описание     : PHP is an HTML-embedded scripting language. PHP attempts to make it
  # : easy for developers to write dynamically generated web pages. PHP also
  # : offers built-in database integration for several commercial and
  # : non-commercial database management systems, so writing a
  # : database-enabled webpage with PHP is fairly simple. The most common
  # : use of PHP coding is probably as a replacement for CGI scripts.

  local install_pkg=(
    'php'
  )

  pm -g "$@" -- "${install_pkg[@]}"

  install_pkg=(
    'php-fpm'
    'php-phpunit-PHPUnit'
    'php-pear-MDB2'
    'php-pear-MDB2-Driver-mysqli'
    'php-pecl-memcache'
    'php-pecl-memcached'
    'php-pecl-apcu'
    'php-devel'
    'php-pecl-apcu-devel'
    'php-pear-PHP-CodeSniffer'
    'php-embedded'
    'php-domxml-php4-php5'
    'php-masterminds-html5'
    'php-pecl-krb5'
    'php-pecl-krb5-devel'
    'php-phpunit-mock-objects5'
    'php-phpunit-php-code-coverage5'
    'php-sabre-event5'
    'php-whitehat101-apr1-md5'
    'php-ldap'
    'php-cs-fixer'
    'php-pecl-yaml'
    'php-xmlrpc'
    'php-pear-CAS'
    'php-pclzip'
    # Краткое опис : Dependency Manager for PHP
    # URL          : https://getcomposer.org/
    # Лицензия     : MIT
    # Описание     : Composer helps you declare, manage and install dependencies of PHP projects,
    # : ensuring you have the right stack everywhere.
    # :
    # : Documentation: https://getcomposer.org/doc/
    'composer'
    # Краткое опис : Documentation generator for PHP
    # URL          : http://www.phpdoc.org
    # Лицензия     : MIT and ASL 2.0 and BSD and CC-BY and (DWPL and MIT) and (MIT and GPLv2) and (MIT and GPLv2 and Public Domain and CC-BY) and (MIT and GPLv3) and (MIT or GPLv2) and OFL
    # Описание     : phpDocumentor is an application that is capable of analyzing your PHP source
    # : code and DocBlock comments to generate a complete set of API Documentation.
    # :
    # : Inspired by phpDocumentor 1 and JavaDoc it continues to innovate and is up to
    # : date with the latest technologies and PHP language features.
    # :
    # : Features: phpDocumentor supports the following:
    # : * PHP 5.3 compatible, full support for Namespaces, Closures and more is provided
    # : * Shows any tag, some tags add additional functionality to phpDocumentor
    # :   (such as @link)
    # : * Processing speed, Zend Framework experienced a significant reduction in
    # :   processing time compared to phpDocumentor 1
    # : * Low memory usage, peak memory usage for small projects is less than 20MB,
    # :   medium projects 40MB and large frameworks 100MB
    # : * Incremental parsing, if you kept the Structure file from a previous run you
    # :   get an additional performance boost of up to 80% on top of the mentioned
    # :   processing speed above
    # : * Easy template building, if you want to make a branding you only have to call
    # :   1 task and edit 3 files
    # : * Command-line compatibility with phpDocumentor 1, phpDocumentor 2 is an
    # :   application in its own right but the basic phpDocumentor 1 arguments,
    # :   such as --directory, --file and --target, have been adopted
    # : * Two-step process, phpDocumentor first generates a cache with your application
    # :   structure before creating the output. If you'd like you can use that to power
    # :   your own tools or formatters!
    'phpdoc'
  )

  pm "$@" -- "${install_pkg[@]}"

}

function main_php_script_source() {

  # prinf "Initialise main function of php script source\n";

  install_php "$@"

}

main_php_script_source "$@"
