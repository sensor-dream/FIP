#!/bin/env bash
# -*- coding: utf-8 -*-
#
## @Author: sensor-dream
## @Email: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © Sensor-Dream Boxed System (SDBS). Contacts: sensor-dream@sensor-dream.ru
## @License: http://www.apache.org/licenses/LICENSE-2.0
## @Site: https://sensor-dream.ru
## @File: functions
## @Creation date file: 21.08.2020, 04:47:20

declare -rx functions_script_source="$BASH_SOURCE"

printf "Loading: %s\n" "$(readlink -m ${BASH_SOURCE})"

function trim_space() {
  echo "$(sed -e 's/[[:space:]]\+/ /g; s/^[ ]//; s/[ \t]$//;' <<<$@)"
}

#  Список файлов пакета и где они находятся
function get_list_rpm_file() {
  echo "$(repoquery -lq $1)"
}

#  Список местонахождения файлов библиотеки
function get_list_lib_file() {
  echo "$(ldconfig -p | grep $1)"
}

#  check_packages <${array[*]}>
#  check_packages <"a b c d">
#  return list text  string
function check_packages() {
  echo $(rpm -qa --qf '%{name}' $@)
}

#cat <<EOF >/dev/null
if [[ "$(check_packages dnf-utils)" == 'dnf-utils' ]]; then
  printf "Check dnf-utils is OK \n"
else
  sudo dnf install 'dnf-utils'
fi
#EOF

#  check_instaldl_packages <${array[*]}>
#  check_installd_packages <"a b c d">
#  return list text  string
function check_installed_packages() {
  echo $(repoquery --installed --qf '%{name}' $@)
}

#  find_packages_installation <${array[*]}>
#  find_packages_installation <"a b c d">
function find_packages_installation() {
  temp_one=
  local Arg=($(trim_space $@))
  # local Arg=("$@");
  # echo ${Arg[*]};
  local installPackages=($(check_installed_packages ${Arg[*]}))
  local Install=()
  for i in ${!Arg[*]}; do
    if ! grep -q "${Arg[$i]}" <<<${installPackages[*]}; then
      Install+=("${Arg[$i]}")
    fi
  done
  echo -en '\e[1;5;31m'"Package(s) already used:\n\t"'\e[0m\e[1;033m'"${installPackages[@]}\n"'\e[0m'
  tput sgr0
  # echo ${Install[@]}
  temp_one=(${Install[@]})
}

#  pm <${array[*]}>
#  pm <"a b c d">
function pm() {

  local action='install'
  local options='--skip-broken'
  local exclude=''
  local force=0

  OPTIND=1

  while getopts "frRan:x" OPT; do
    case $OPT in
    f)
      options="${options} --allowerasing --best"
      force=1
      ;;
    r) action='remove' ;;
    R) action='reinstall' ;;
    a) options="${options} --assumeyes" ;;
    n) options="${options} --noautoremove" ;;
    x) exclude="${exclude} -x $OPTARG" ;;
    *) ;;
    esac
  done

  shift $(($OPTIND - 1))
  [ "${1:-}" = "--" ] && shift

  find_packages_installation "${@}"
  if [[ -n "${temp_one}" ]]; then
    echo -en '\e[1;5;36m'"Package(s) install list:\n\t"'\e[0m\e[1;033m'"${temp_one[@]}\n"'\e[0m'
    sudo dnf "${action}" ${temp_one[@]} "${exclude}"
  fi
}

function X_GNOME_Autostart_disabled() {

  local name="$(echo $@ | sed 's%/etc/xdg/autostart/%%')"
  if grep -q 'X-GNOME-Autostart-enabled' "$@"; then
    if grep -q 'X-GNOME-Autostart-enabled=true' "$@"; then
      sudo bash -c "sed -i 's/^X-GNOME-Autostart-enabled=true/X-GNOME-Autostart-enabled=false/g' $@"
      echo "Disable autostart $@"
    else
      echo "Autostart is disabled in $@"
    fi
  else
    sudo bash -c "echo X-GNOME-Autostart-enabled=false >>$@"
    echo "Disable autostart $@"
  fi
  if [[ ! -d "/home/${session_user}/.config/autostart" ]]; then
    mkdir -p "/home/${session_user}/.config/autostart"
    echo "Not found /home/${session_user}/.config/autostart created it"
  fi
  if [[ ! -f "/home/${session_user}/.config/autostart/${name}" ]]; then
    cp "$@" "/home/${session_user}/.config/autostart"
    echo "Copy $@ to /home /${session_user}/.config/autostart/${name}"
  else
    echo "/home/${session_user}/.config/autostart/${name} already exists"
    if grep -q 'X-GNOME-Autostart-enabled' "/home/${session_user}/.config/autostart/${name}"; then
      if grep -q 'X-GNOME-Autostart-enabled=true' "/home/${session_user}/.config/autostart/${name}"; then
        sed -i 's/^X-GNOME-Autostart-enabled=true/X-GNOME-Autostart-enabled=false/g' "/home/${session_user}/.config/autostart/${name}"
        echo "Disable autostart /home/${session_user}/.config/autostart/${name}"
      else
        echo "Autostart is disabled in /home/${session_user}/.config/autostart/${name}"
      fi
    else
      echo 'X-GNOME-Autostart-enabled=false' >>"/home/${session_user}/.config/autostart/${name}"
      echo "Disable /home/${session_user}/.config/autostart/${name}"
    fi
  fi
}
export -f X_GNOME_Autostart_disabled
